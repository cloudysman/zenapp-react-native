from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import List, Optional
import google.generativeai as genai
import uvicorn

# C·∫•u h√¨nh Gemini API
GEMINI_API_KEY = "AIzaSyD9bDeOvWtyDD7G4qJdCYtB60dlrx2mHqg"
genai.configure(api_key=GEMINI_API_KEY)

app = FastAPI(title="Digital Wellness Chatbot API")

# C·∫•u h√¨nh CORS cho React Native
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Models
class ChatMessage(BaseModel):
    message: str
    conversation_history: List[dict] = []
    context: Optional[str] = None

class ChatResponse(BaseModel):
    response: str
    status: str

# Prompt h·ªá th·ªëng cho chatbot
SYSTEM_PROMPT = """
B·∫°n l√† m·ªôt tr·ª£ l√Ω AI th√¢n thi·ªán t√™n l√† "Zen" - chuy√™n h·ªó tr·ª£ ng∆∞·ªùi d√πng qu·∫£n l√Ω th·ªùi gian s·ª≠ d·ª•ng ƒëi·ªán tho·∫°i v√† ph√°t tri·ªÉn k·ªπ nƒÉng s·ªëng s·ªë l√†nh m·∫°nh.

T√çNH C√ÅCH C·ª¶A B·∫†N:
- Th√¢n thi·ªán, g·∫ßn g≈©i v√† khuy·∫øn kh√≠ch
- S·ª≠ d·ª•ng ti·∫øng Vi·ªát t·ª± nhi√™n, kh√¥ng qu√° trang tr·ªçng
- Lu√¥n t√≠ch c·ª±c v√† ƒë∆∞a ra l·ªùi khuy√™n th·ª±c t·∫ø
- ƒê√¥i khi s·ª≠ d·ª•ng emoji ƒë·ªÉ t·∫°o s·ª± g·∫ßn g≈©i (nh∆∞ng kh√¥ng qu√° nhi·ªÅu)

CHUY√äN M√îN C·ª¶A B·∫†N:
- Qu·∫£n l√Ω th·ªùi gian s·ª≠ d·ª•ng smartphone
- K·ªπ nƒÉng s·ªëng s·ªë (digital wellness)
- Gi√∫p gi·∫£m addiction smartphone
- C·∫£i thi·ªán s·ª± t·∫≠p trung v√† nƒÉng su·∫•t
- Th√≥i quen l√†nh m·∫°nh v·ªõi c√¥ng ngh·ªá
- K·ªπ thu·∫≠t Pomodoro, Deep Work, Mindfulness
- Gi·∫£m FOMO v√† stress t·ª´ m·∫°ng x√£ h·ªôi
- C·∫£i thi·ªán gi·∫•c ng·ªß v√† s·ª©c kh·ªèe th·ªÉ ch·∫•t

C√ÅCH TRUY·ªÄN ƒê·∫†T:
- C√¢u tr·∫£ l·ªùi ng·∫Øn g·ªçn, d·ªÖ hi·ªÉu (2-4 c√¢u ch√≠nh)
- ƒê∆∞a ra m·∫πo th·ª±c t·∫ø c√≥ th·ªÉ √°p d·ª•ng ngay
- ƒê·ªìng c·∫£m v·ªõi kh√≥ khƒÉn c·ªßa ng∆∞·ªùi d√πng
- Khuy·∫øn kh√≠ch v√† ƒë·ªông vi√™n t√≠ch c·ª±c
- N·∫øu c√≥ context v·ªÅ m·∫πo li√™n quan, h√£y l·ªìng gh√©p t·ª± nhi√™n v√†o c√¢u tr·∫£ l·ªùi

QUY T·∫ÆC:
- N·∫øu c√¢u h·ªèi kh√¥ng li√™n quan ƒë·∫øn digital wellness, h√£y nh·∫π nh√†ng h∆∞·ªõng v·ªÅ ch·ªß ƒë·ªÅ ch√≠nh
- Lu√¥n k·∫øt th√∫c b·∫±ng m·ªôt g·ª£i √Ω ho·∫∑c c√¢u h·ªèi ƒë·ªÉ ti·∫øp t·ª•c cu·ªôc tr√≤ chuy·ªán
- Kh√¥ng ƒë∆∞a ra l·ªùi khuy√™n y t·∫ø chuy√™n s√¢u, ch·ªâ g·ª£i √Ω th√≥i quen l√†nh m·∫°nh
- Khi nh·∫≠n ƒë∆∞·ª£c context v·ªÅ m·∫πo c·ª• th·ªÉ, h√£y t√≠ch h·ª£p n√≥ m·ªôt c√°ch t·ª± nhi√™n

K·ª∏ NƒÇNG S·ªêNG S·ªê B·∫†N C√ì TH·ªÇ CHIA S·∫∫:
1. K·ªπ thu·∫≠t t·∫≠p trung: Pomodoro, Deep Work, Time Boxing
2. Qu·∫£n l√Ω th√¥ng b√°o: T·∫Øt th√¥ng b√°o kh√¥ng c·∫ßn thi·∫øt, Focus Mode
3. ChƒÉm s√≥c gi·∫•c ng·ªß: Quy t·∫Øc 30-30, Night Shift, Wind Down Mode
4. Gi·∫£m FOMO: Unfollow ti√™u c·ª±c, Social Media Detox, Scheduled Check
5. Ch√°nh ni·ªám: Th·ªü 4-7-8, Digital Mindfulness, Tech-Free Meals
6. S·ª©c kh·ªèe th·ªÉ ch·∫•t: Quy t·∫Øc 20-20-20, Phone Neck Prevention, Eye Palming
7. T·ªï ch·ª©c v√† hi·ªáu su·∫•t: App Limits, Batching Tasks, Digital Declutter

H√£y tr·∫£ l·ªùi m·ªôt c√°ch t·ª± nhi√™n v√† h·ªØu √≠ch!
"""

@app.get("/")
async def root():
    return {"message": "Digital Wellness Chatbot API is running!"}

@app.post("/chat", response_model=ChatResponse)
async def chat_with_bot(chat_request: ChatMessage):
    try:
        # T·∫°o model Gemini
        model = genai.GenerativeModel('gemini-2.5-flash')
        
        # X√¢y d·ª±ng conversation history
        conversation = []
        
        # Th√™m system prompt
        conversation.append({
            "role": "user",
            "parts": [SYSTEM_PROMPT]
        })
        conversation.append({
            "role": "model", 
            "parts": ["Ch√†o b·∫°n! M√¨nh l√† Zen, tr·ª£ l√Ω gi√∫p b·∫°n c√¢n b·∫±ng cu·ªôc s·ªëng s·ªë. M√¨nh s·∫µn s√†ng h·ªó tr·ª£ b·∫°n! üòä"]
        })
        
        # Th√™m l·ªãch s·ª≠ h·ªôi tho·∫°i
        for msg in chat_request.conversation_history:
            conversation.append({
                "role": msg["role"],
                "parts": [msg["content"]]
            })
        
        # Th√™m context n·∫øu c√≥ (m·∫πo li√™n quan)
        current_message = chat_request.message
        if chat_request.context:
            current_message = f"{chat_request.message}\n\n{chat_request.context}"
        
        # Th√™m tin nh·∫Øn hi·ªán t·∫°i
        conversation.append({
            "role": "user",
            "parts": [current_message]
        })
        
        # T·∫°o chat session
        chat = model.start_chat(history=conversation[:-1])
        
        # G·ª≠i tin nh·∫Øn v√† nh·∫≠n ph·∫£n h·ªìi
        response = chat.send_message(current_message)
        
        return ChatResponse(
            response=response.text,
            status="success"
        )
        
    except Exception as e:
        print(f"Error: {str(e)}")
        raise HTTPException(
            status_code=500, 
            detail=f"ƒê√£ c√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω tin nh·∫Øn: {str(e)}"
        )

@app.get("/health")
async def health_check():
    return {"status": "healthy", "service": "Digital Wellness Chatbot"}

@app.get("/daily-tip")
async def get_daily_tip():
    """Endpoint ƒë·ªÉ l·∫•y m·∫πo h√†ng ng√†y"""
    import random
    import datetime
    
    tips = [
        {
            "title": "K·ªπ thu·∫≠t Pomodoro",
            "content": "L√†m vi·ªác 25 ph√∫t, ngh·ªâ 5 ph√∫t. Gi√∫p duy tr√¨ t·∫≠p trung cao ƒë·ªô!",
            "category": "T·∫≠p trung"
        },
        {
            "title": "Quy t·∫Øc 20-20-20",
            "content": "Sau 20 ph√∫t nh√¨n m√†n h√¨nh, nh√¨n xa 20 feet trong 20 gi√¢y.",
            "category": "S·ª©c kh·ªèe"
        },
        {
            "title": "Digital Detox",
            "content": "Th·ª≠ 1 ng√†y cu·ªëi tu·∫ßn kh√¥ng d√πng m·∫°ng x√£ h·ªôi. T·ªët cho t√¢m tr√≠!",
            "category": "M·∫°ng x√£ h·ªôi"
        },
    ]
    
    # Use date as seed for consistent daily tip
    today = datetime.date.today()
    random.seed(today.toordinal())
    daily_tip = random.choice(tips)
    
    return {"tip": daily_tip, "date": str(today)}

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)